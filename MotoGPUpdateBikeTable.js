function init() 
{
	/*
		setup the event listener for file selection
	*/
	var toolElement = document.getElementById('fileInputTxt');
	toolElement.addEventListener('change', readFile, false);
}

// readSingleFile from http://stackoverflow.com/questions/17648871/how-can-i-parse-a-text-file-using-javascript
// article also shows how to load a file without user selection using an ajax request 
function readFile(evt) 
{
	var f = evt.target.files[0];   
	if (f) {
		var r = new FileReader();
		var index = evt.target.fileIndex;
		r.onload = function(e) { 
			var contents = e.target.result;             
			var ct = r.result;
			
			ProcessUnicodeTextFile(ct);
		}
		r.readAsText(f);
		
	} 
	else { 
		alert("Failed to load file");
	}
}

function fixedCharCodeAt(str, idx) {
  // ex. fixedCharCodeAt('\uD800\uDC00', 0); // 65536
  // ex. fixedCharCodeAt('\uD800\uDC00', 1); // false
  idx = idx || 0;
  var code = str.charCodeAt(idx);
  var hi, low;
  
  // High surrogate (could change last hex to 0xDB7F to treat high
  // private surrogates as single characters)
  if (0xD800 <= code && code <= 0xDBFF) {
    hi = code;
    low = str.charCodeAt(idx + 1);
    if (isNaN(low)) {
      throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';
    }
    return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
  }
  if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate
    // We return false to allow loops to skip this iteration since should have
    // already handled high surrogate above in the previous iteration
    return false;
    /*hi = str.charCodeAt(idx - 1);
    low = code;
    return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;*/
  }
  return code;
}

function unicodeSplit(str, splitChar, foo)
{
    var str1 = "A↵  translations: [↵T";
    var n = str1.charCodeAt(1);
	var targetList = [];
	targetList[0] = "";
	var seperator = String.fromCharCode('\u21b5');
	var seperator2 = "↵ ";
	var seperator3 = String.fromCharCode(8629) + "äbc + ABC";
	var seperator4 = seperator3.charCodeAt(0);
	for(var i = 0; i < str.length; i++){
		var ch = str[i];
		var ch1 = str.charCodeAt(i);
		var ch2 = str.codePointAt(i);
		var ch3 = fixedCharCodeAt(str, i);
		if (ch3 != foo) {
			if (ch3 != 13) targetList[targetList.length - 1] += ch;//ignore CR
		}
		else {
			targetList.push("");
		}
	}
	return targetList;
}

function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

function ProcessUnicodeTextFile(ct)
{
	var startOfItem = 0;
	var notUsedOrdinal = 0;
	var lines = unicodeSplit(ct, '\\u21b5', 10);//"↵");
	var outString = "";
	var columnNames = unicodeSplit(lines[0], '\\u21b5', 9);
	var numColumns = columnNames.length;
	var firstRow = unicodeSplit(lines[1], '\\u21b5', 9);
	
	var OutString = "";
	OutString += "//**** This file is autogenerated by a tool ***\r\n";
	OutString += "//the tool can be found here: http://2funguys.editme.com/MotoGPUpdateBikeTable\r\n\r\n"
	OutString += "using System.Collections.Generic ;\r\n\r\n";
	OutString += "public struct BikeInfoTable\r\n";
	OutString += "{\r\n";
	for (var i = 0; i < numColumns; i++) {
		OutString += "    public " + ((isNumber(firstRow[i])) ? "int " : "string ") + columnNames[i] + ";\r\n";
	}
	OutString += "}\r\n\r\n";
	OutString += "public static class BikeTables\r\n";
	OutString += "{\r\n";
	OutString += "	static List<BikeInfoTable> _itemList = null ;\r\n";
	OutString += "	public static List<BikeInfoTable> itemList\r\n";
	OutString += "	{\r\n";
	OutString += "		get{\r\n";
	OutString += "			if( _itemList == null ) _itemList = new List<BikeInfoTable>( items ) ;\r\n";
	OutString += "			return _itemList ;\r\n";
	OutString += "		}\r\n";
	OutString += "	}\r\n";
	OutString += "\r\n";
	OutString += "	public static BikeInfoTable[] items = {\r\n";
	
	var length = lines.length;
	for (var i = 1; i < lines.length; i++) {
		var parts = unicodeSplit(lines[i], '\\u21b5', 9);
		if (parts.length < numColumns) {
			length = i;
			break;
		}
	}
	for (var i = 1; i < length; i++) {
		OutString += "\t\tnew BikeInfoTable { ";
		var parts = unicodeSplit(lines[i], '\\u21b5', 9);
		for (var j = 0; j < numColumns; j++) {
			OutString += columnNames[j] + "=" 
			if (isNumber(parts[j])) {
				OutString += parts[j];
			}
			else {
				OutString += "\"" + parts[j] +"\"";
			}
			if (j == numColumns - 1) {
				if (i == length - 1) {
					if (j == numColumns - 1) {
						OutString += "}\r\n";
					}
					else {
						OutString += "},\r\n\t\t";
					}
				}
				else {
					OutString += "},\r\n";
				}
			}
			else {
				OutString += ", ";
			}
		}
	}	
	OutString += "\t};\r\n}\r\n";

	var blob = new Blob([OutString], {type: "text/plain;charset=utf-8"}); 
	saveAs(blob, "BikeInfoTable.cs");
}	

